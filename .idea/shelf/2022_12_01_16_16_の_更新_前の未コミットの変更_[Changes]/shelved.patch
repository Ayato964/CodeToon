Index: app/src/main/java/codetoon/server/Reception.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package codetoon.server;\r\nimport codetoon.system.Admin;\r\nimport codetoon.system.Memorys;\r\n\r\nimport java.io.IOException;\r\nimport java.net.Socket;\r\nimport java.io.ObjectInputStream;\r\n\r\npublic class Reception extends Thread {\r\n    Socket sock;\r\n    ObjectInputStream in;\r\n    boolean isReturnReception;\r\n\r\n    Reception(Socket _sock, boolean _isReturnReception) {\r\n        sock = _sock;\r\n\r\n        System.out.println(\"Hello\");\r\n        isReturnReception = _isReturnReception;\r\n        try {\r\n            in = new ObjectInputStream(sock.getInputStream());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void run() {\r\n        System.out.println(\"HII\");\r\n        while(true){\r\n        try {\r\n\r\n            try {\r\n                testClassWrapper _testWrapper = (testClassWrapper) in.readObject();\r\n                System.out.println(\"Recive  \" + _testWrapper.memory.get(0).getName() + \"    \" + _testWrapper.memory.get(0).isClient());\r\n                    if(isReturnReception){\r\n                        Memorys.memory =_testWrapper.memory;\r\n                    }else{\r\n                        Memorys.opponentMemory = _testWrapper.memory;\r\n\r\n                    }\r\n                    System.out.println(\"receivedData: \" + Memorys.memory.get(0).serialID + \"    \" + Admin.getInstance().getSerialID());\r\n                    System.out.println(Memorys.opponentMemory.get(0).getName());\r\n            } catch (ClassNotFoundException e) {\r\n          //      e.printStackTrace();\r\n            }\r\n\r\n            \r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/codetoon/server/Reception.java b/app/src/main/java/codetoon/server/Reception.java
--- a/app/src/main/java/codetoon/server/Reception.java	(revision a1884816dac17c58ce3706ecc1f9e08d639ab10e)
+++ b/app/src/main/java/codetoon/server/Reception.java	(date 1669841358055)
@@ -46,7 +46,7 @@
             
 
         } catch (IOException e) {
-            e.printStackTrace();
+         //   e.printStackTrace();
         }
     }
     }
Index: app/src/main/java/codetoon/system/Memory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package codetoon.system;\r\n\r\nimport codetoon.main.Main;\r\nimport codetoon.map.PazzleStage;\r\nimport codetoon.method.Methods;\r\nimport codetoon.method.MyMethod;\r\nimport codetoon.util.Indentification;\r\nimport codetoon.util.IsTick;\r\nimport codetoon.util.TickRegistory;\r\nimport codetoon.server.Server;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.io.Serializable;\r\n\r\npublic class Memory extends Player implements Serializable{\r\n    public int serialID;\r\n    private StringBuilder source = null;\r\n    EnumMemoryStates states;\r\n    int x, y, w, h, idI, idC;\r\n    public  Color color = Color.WHITE;\r\n    public int counter = 0;\r\n    private String name = \"Memory\";\r\n    private boolean isHostMemory;\r\n\r\n    public Memory(int x, int y, int w, int h, int idI, int idC){\r\n        serialID = Admin.getInstance().getSerialID();\r\n        isHostMemory = Server.isHost;\r\n        states = EnumMemoryStates.NONE;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n        this.idI = idI;\r\n        this.idC = idC;\r\n    }\r\n\r\n    public StringBuilder getSource() {\r\n        return source;\r\n    }\r\n\r\n    public static <T extends IsTick> void tick(T t){\r\n        if(CodeToon.isGameStart){\r\n            Memory memory = (Memory)t;\r\n            memory.counter ++;\r\n            if(memory.counter / 1000 >= 5){\r\n                memory.counter = 0;\r\n                //System.out.println(memory.source != null ? memory.source.toString() : \"?\\?[?X????????????????\");\r\n\r\n                memory.run();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public void hacking(int pass){\r\n        if(pass == this.pass){\r\n            states = EnumMemoryStates.HACKED;\r\n            serialID = Admin.getInstance().getSerialID();\r\n        }else{\r\n            Message.addMessage(\"パスワードが設定されているか、パスワードが違うため、攻撃できません。\", Color.BLACK);\r\n        }\r\n    }\r\n\r\n    public void display(Graphics g){\r\n\r\n        g.setColor(states.getColor());\r\n        if(idI == 0 &&idC == 0){\r\n       //     System.out.println(color);\r\n        }\r\n      g.fillRect(x, y, w, h);\r\n      g.setColor(Color.BLACK);\r\n      g.drawRect(x, y, w, h);\r\n    }\r\n\r\n    @Override\r\n    public String getName(){\r\n      return name + \"_\" + idI + \"_\" + idC;\r\n    }\r\n\r\n    @Override\r\n    public TickRegistory getTick() {\r\n        return TickRegistory.createTicker(this, Memory::tick);\r\n    }\r\n\r\n    @Override\r\n    public void endMethod(@NotNull Console console, ArrayList<MyMethod> methods, StringBuilder source) {\r\n        setRunMethod(methods);\r\n        console.setHost(Admin.getInstance());\r\n        source = Indentification.removeEnd(source);\r\n        this.source = source;\r\n        console.panel.resetAll();\r\n        Server.server.sendOpponentCopy();\r\n    }\r\n\r\n    @Override\r\n    protected void blackList(ArrayList<MyMethod> m) {\r\n        m.add(Methods.CONNECT.get());\r\n    }\r\n\r\n    @Override\r\n    public String getID() {\r\n        return \"memory\" +\"[\" + idI + \"][\" + idC + \"]\";\r\n    }\r\n\r\n    @Override\r\n    public void connection(int password) {\r\n        System.out.println(serialID + \"    \" + Admin.getInstance().getSerialID());\r\n        if(states == EnumMemoryStates.HACKED && serialID == Admin.getInstance().getSerialID()){\r\n            connect(password);\r\n        }else if(states == EnumMemoryStates.HACKED) {\r\n            Message.addMessage(\"このメモリーはハッキングされています！！\", Color.RED);\r\n            Message.addMessage(\"attack()で取り返してください\", Color.RED);\r\n\r\n        }else{\r\n            connect(password);\r\n        }\r\n    }\r\n    private void connect(int password){\r\n        PazzleStage p = (PazzleStage) Main.getInstance().getMap();\r\n        if (pass == 0 || pass == password) {\r\n            Message.addMessage(p.getConsole().getHost().getName() + \"にアクセスされました\", Color.BLACK);\r\n            p.getConsole().setHost(this);\r\n            p.getConsole().panel.setProgram(getSource() != null ? getSource() : new StringBuilder());\r\n        } else {\r\n            p.getConsole().panel.setProgram(new StringBuilder());\r\n            Message.addMessage(\"パスワードが再設定されているか、パスワードが間違っている為アクセスできません\", Color.BLACK);\r\n\r\n        }\r\n    }\r\n    @Override\r\n    public void setRunMethod(ArrayList<MyMethod> m) {\r\n        super.setRunMethod(m);\r\n        if(states != EnumMemoryStates.HACKED) {\r\n            states = EnumMemoryStates.USED;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean isClient() {\r\n        if(isHostMemory == Server.isHost){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-31j
===================================================================
diff --git a/app/src/main/java/codetoon/system/Memory.java b/app/src/main/java/codetoon/system/Memory.java
--- a/app/src/main/java/codetoon/system/Memory.java	(revision a1884816dac17c58ce3706ecc1f9e08d639ab10e)
+++ b/app/src/main/java/codetoon/system/Memory.java	(date 1669831473304)
@@ -112,6 +112,7 @@
         }else if(states == EnumMemoryStates.HACKED) {
             Message.addMessage("このメモリーはハッキングされています！！", Color.RED);
             Message.addMessage("attack()で取り返してください", Color.RED);
+            ((PazzleStage)Main.getInstance().getMap()).getConsole().panel.setProgram(new StringBuilder());
 
         }else{
             connect(password);
Index: app/src/main/java/codetoon/argument/ObjectArgument.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package codetoon.argument;\r\n\r\nimport codetoon.method.*;\r\nimport codetoon.system.Admin;\r\nimport codetoon.system.Memorys;\r\nimport codetoon.util.*;\r\nimport codetoon.variable.*;\r\n\r\npublic class ObjectArgument extends Argument<Object, String> {\r\n    private static final ObjectArgument instance = new ObjectArgument();\r\n    private String percent;\r\n    private ObjectArgument(){}\r\n    @Override\r\n    public Object indentification(String s) {\r\n        StringBuilder builder = new StringBuilder().append(s);\r\n        int pi = serch('.', builder);\r\n        if(pi != -1){\r\n            percent = builder.substring(0, pi);\r\n            builder.delete(0, pi + 1);\r\n        }else{\r\n            percent = null;\r\n        }\r\n\r\n        System.out.println(builder);\r\n        Object ObjName =\r\n       isMethod(builder) == null ?\r\n        isArgument(builder) == null ?\r\n        !builder.toString().equals(Admin.getInstance().getID()) ? ERROR\r\n        : Admin.getInstance()\r\n        : isArgument(builder)\r\n        : isMethod(builder);\r\n        System.out.println(ObjName.getClass());\r\n           if(ObjName.toString() != ERROR.toString()){\r\n                if(ObjName instanceof MyMethod){\r\n                    MyMethod method = (MyMethod) ObjName;\r\n                    method.set(Indentification.getInstance().getArgument(builder));\r\n                    return method;\r\n                }\r\n                \r\n                if(ObjName instanceof Variable){\r\n                    Variable<?> v = (Variable<?>) ObjName;\r\n                   // System.out.println(ObjName.toString() + \"   this isArray : \" + v.isArray);\r\n                    \r\n                    if(v.isArray){\r\n                        v.set(percent == null ? getVariable(builder) : getVariable(builder, percent));\r\n                        return v.action();\r\n                    }\r\n                    return v.action();\r\n                }\r\n                if(ObjName instanceof Admin){\r\n                    return ObjName;\r\n                }\r\n           }\r\n        return null;\r\n    }\r\n\r\n    public static ObjectArgument getInstance() {\r\n        return instance;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/codetoon/argument/ObjectArgument.java b/app/src/main/java/codetoon/argument/ObjectArgument.java
--- a/app/src/main/java/codetoon/argument/ObjectArgument.java	(revision a1884816dac17c58ce3706ecc1f9e08d639ab10e)
+++ b/app/src/main/java/codetoon/argument/ObjectArgument.java	(date 1669840223042)
@@ -21,7 +21,7 @@
             percent = null;
         }
 
-        System.out.println(builder);
+        //System.out.println(builder);
         Object ObjName =
        isMethod(builder) == null ?
         isArgument(builder) == null ?
@@ -29,7 +29,7 @@
         : Admin.getInstance()
         : isArgument(builder)
         : isMethod(builder);
-        System.out.println(ObjName.getClass());
+        //System.out.println(ObjName.getClass());
            if(ObjName.toString() != ERROR.toString()){
                 if(ObjName instanceof MyMethod){
                     MyMethod method = (MyMethod) ObjName;
