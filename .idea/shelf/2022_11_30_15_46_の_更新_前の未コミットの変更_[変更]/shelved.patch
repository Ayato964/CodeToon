Index: app/src/main/java/codetoon/system/Memory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package codetoon.system;\n\nimport codetoon.main.Main;\nimport codetoon.map.PazzleStage;\nimport codetoon.method.Methods;\nimport codetoon.method.MyMethod;\nimport codetoon.util.Indentification;\nimport codetoon.util.IsTick;\nimport codetoon.util.TickRegistory;\nimport codetoon.server.Server;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.awt.*;\nimport java.util.ArrayList;\nimport java.io.Serializable;\n\npublic class Memory extends Player implements Serializable{\n    private int serialID;\n    private StringBuilder source = null;\n    EnumMemoryStates states;\n    int x, y, w, h, idI, idC;\n    public  Color color = Color.WHITE;\n    public int counter = 0;\n    private String name = \"Memory\";\n    private boolean isHostMemory;\n\n    public Memory(int x, int y, int w, int h, int idI, int idC){\n        serialID = Admin.getInstance().getSerialID();\n        isHostMemory = Server.isHost;\n        states = EnumMemoryStates.NONE;\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n        this.idI = idI;\n        this.idC = idC;\n    }\n\n    public StringBuilder getSource() {\n        return source;\n    }\n\n    public static <T extends IsTick> void tick(T t){\n        if(CodeToon.isGameStart){\n            Memory memory = (Memory)t;\n            memory.counter ++;\n            if(memory.counter / 1000 >= 5){\n                memory.counter = 0;\n                //System.out.println(memory.source != null ? memory.source.toString() : \"?\\?[?X????????????????\");\n\n                memory.run();\n            }\n        }\n\n    }\n\n    public void hacking(int pass){\n        if(pass == this.pass){\n            states = EnumMemoryStates.HACKED;\n            serialID = Admin.getInstance().getSerialID();\n        }else{\n            Message.addMessage(\"パスワードが設定されているか、パスワードが違うため、攻撃できません。\", Color.BLACK);\n        }\n    }\n\n    public void display(Graphics g){\n\n        g.setColor(states.getColor());\n        if(idI == 0 &&idC == 0){\n       //     System.out.println(color);\n        }\n      g.fillRect(x, y, w, h);\n      g.setColor(Color.BLACK);\n      g.drawRect(x, y, w, h);\n    }\n\n    @Override\n    public String getName(){\n      return name + \"_\" + idI + \"_\" + idC;\n    }\n\n    @Override\n    public TickRegistory getTick() {\n        return TickRegistory.createTicker(this, Memory::tick);\n    }\n\n    @Override\n    public void endMethod(@NotNull Console console, ArrayList<MyMethod> methods, StringBuilder source) {\n        setRunMethod(methods);\n        console.setHost(Admin.getInstance());\n        source = Indentification.removeEnd(source);\n        this.source = source;\n        console.panel.resetAll();\n        Server.server.sendOpponentCopy();\n    }\n\n    @Override\n    protected void blackList(ArrayList<MyMethod> m) {\n        m.add(Methods.CONNECT.get());\n    }\n\n    @Override\n    public String getID() {\n        return \"memory\" +\"[\" + idI + \"][\" + idC + \"]\";\n    }\n\n    @Override\n    public void connection(int password) {\n        System.out.println(serialID + \"    \" + Admin.getInstance().getSerialID());\n        if(states == EnumMemoryStates.HACKED && serialID == Admin.getInstance().getSerialID()){\n            connect(password);\n        }else if(states == EnumMemoryStates.HACKED) {\n            Message.addMessage(\"このメモリーはハッキングされています！！\", Color.RED);\n            Message.addMessage(\"attack()で取り返してください\", Color.RED);\n\n        }else{\n            connect(password);\n        }\n    }\n    private void connect(int password){\n        PazzleStage p = (PazzleStage) Main.getInstance().getMap();\n        if (pass == 0 || pass == password) {\n            Message.addMessage(p.getConsole().getHost().getName() + \"にアクセスされました\", Color.BLACK);\n            p.getConsole().setHost(this);\n            p.getConsole().panel.setProgram(getSource() != null ? getSource() : new StringBuilder());\n        } else {\n            p.getConsole().panel.setProgram(new StringBuilder());\n            Message.addMessage(\"パスワードが再設定されているか、パスワードが間違っている為アクセスできません\", Color.BLACK);\n\n        }\n    }\n    @Override\n    public void setRunMethod(ArrayList<MyMethod> m) {\n        super.setRunMethod(m);\n        if(!m.isEmpty()) {\n            states = EnumMemoryStates.USED;\n        }else{\n            states = EnumMemoryStates.NONE;\n        }\n    }\n\n    @Override\n    public boolean isClient() {\n        if(isHostMemory == Server.isHost){\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-31j
===================================================================
diff --git a/app/src/main/java/codetoon/system/Memory.java b/app/src/main/java/codetoon/system/Memory.java
--- a/app/src/main/java/codetoon/system/Memory.java	(revision 0b5c0d9f6e493aebf0fb69be68ba8fa4c592e315)
+++ b/app/src/main/java/codetoon/system/Memory.java	(date 1669789906737)
@@ -58,6 +58,7 @@
         if(pass == this.pass){
             states = EnumMemoryStates.HACKED;
             serialID = Admin.getInstance().getSerialID();
+
         }else{
             Message.addMessage("パスワードが設定されているか、パスワードが違うため、攻撃できません。", Color.BLACK);
         }
